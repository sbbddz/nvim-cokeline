*cokeline.txt*    A bufferline for people with addictive personalities
*nvim-cokeline* *cokeline*

  by Riccardo Mazzarini <riccardo.mazzarini@pm.me> ~

==============================================================================
CONTENTS                                                     *cokeline-contents*

  Usage ........................... |cokeline-usage|
  Configuration ................... |cokeline-configuration|
  Buffer .......................... |cokeline-buffer|
  Components ...................... |cokeline-components|
  Mappings ........................ |cokeline-mappings|

==============================================================================
USAGE                                                           *cokeline-usage*

Once you've turned the `termguicolors` option on, you can enable
`nvim-cokeline` by simply calling its `setup` function somewhere in your
config, for example:
>
  -- In your init.lua
  require('cokeline).setup()
<

==============================================================================
CONFIGURATION                                           *cokeline-configuration*

You can configure your `cokeline` by changing the contents of the Lua table
passed to the `setup` function.

The valid keys are:
>
  require('cokeline').setup({
    -- Show the bufferline when there are at least this many visible buffers.
    -- default: `1`.
    show_if_buffers_are_at_least = int,

    buffers = {
      -- A function to filter out unwanted buffers. Takes a buffer table as a
      -- parameter (see |cokeline-buffer|) and has to return either `true` or
      -- `false`.
      -- default: `false`.
      filter_valid = function(buffer) -> boolean,

      -- A looser version of `filter_valid`, use this function if you still
      -- want the `cokeline-{switch,focus}-{prev,next}` mappings to work for
      -- these buffers without displaying them in your bufferline.
      -- default: `false`.
      filter_visible = function(buffer) -> boolean,

      -- Which buffer to focus when a buffer is deleted, `prev` focuses the
      -- buffer to the left of the deleted one while `next` focuses the one the
      -- right. Turned off by default.
      -- default: `false`
      focus_on_delete = 'prev' | 'next',

      -- If set to `last` new buffers are added to the end of the bufferline,
      -- if `next` they are added next to the current buffer.
      -- default: 'last',
      new_buffers_position = 'last' | 'next',
    },

    pick = {
      -- Whether to use the filename's first letter first before
      -- picking a letter from the valid letters list in order.
      -- default: `true`
      use_filename = true | false,

      -- The list of letters that are valid as pick letters. Sorted by
      -- keyboard reachability by default, but may require tweaking for
      -- non-QWERTY keyboard layouts.
      -- default: `'asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERTYQP'`
      letters = 'string',
    },

    mappings = {
      -- Controls what happens when the first (last) buffer is focused and you
      -- try to focus/switch the previous (next) buffer. If `true` the last
      -- (first) buffers gets focused/switched, if `false` nothing happens.
      -- default: `true`.
      cycle_prev_next = true | false,
    },

    rendering = {
      -- The maximum number of characters a rendered buffer is allowed to take
      -- up. The buffer will be truncated if its width is bigger than this
      -- value.
      -- default: `999`.
      max_buffer_width = int,
    },

    -- The default highlight group values.
    -- The `fg` and `bg` keys are either colors in hexadecimal format or
    -- functions taking a `buffer` parameter and returning a color in
    -- hexadecimal format. Similarly, the `style` key is either a string
    -- containing a comma separated list of items in `:h attr-list` or a
    -- function returning one.
    default_hl = {
      -- default: `ColorColumn`'s background color for focused buffers,
      -- `Normal`'s foreground color for unfocused ones.
      fg = '#rrggbb' | function(buffer) -> '#rrggbb',

      -- default: `Normal`'s foreground color for focused buffers,
      -- `ColorColumn`'s background color for unfocused ones.
      -- default: `Normal`'s foreground color.
      bg = '#rrggbb' | function(buffer) -> '#rrggbb',

      -- default: `'NONE'`.
      style = 'attr1,attr2,...' | function(buffer) -> 'attr1,attr2,...',
    },


    -- A list of components to be rendered for each buffer (see
    -- |cokeline-components|).
    -- default: see
    -- https://github.com/noib3/nvim-cokeline/blob/master/lua/cokeline/defaults.lua
    components = {},

    -- Left sidebar to integrate nicely with file explorer plugins.
    -- This is a table containing a `filetype` key and a list of `components` to
    -- be rendered in the sidebar.
    -- The last component will be automatically space padded if necessary
    -- to ensure the sidebar and the window below it have the same width.
    sidebar = {
      filetype = '<filetype>',
      components = {..},
    },
  })
<

==============================================================================
BUFFER                                                         *cokeline-buffer*

Some of the configuration options can be set to functions that take a
`buffer` as a single parameter. This is useful as it allows users to set the
values of components dynamically based on the buffer that component is being
rendered for.

The `buffer` parameter is just a Lua table with the following keys:
>
  buffer = {
    -- The buffer's order in the bufferline (`1` for the first buffer, `2` for
    -- the second buffer, etc.).
    index = int,

    -- The buffer's internal number as reported by `:ls`.
    number = int,

    is_focused = bool,

    is_modified = bool,

    is_readonly = bool,

    -- The buffer is the first visible buffer in the tab bar
    is_first    = true | false,

    -- The buffer is the last visible buffer in the tab bar
    is_last     = true | false,

    -- The buffer's type as reported by `:echo &buftype`.
    type = 'string',

    -- The buffer's filetype as reported by `:echo &filetype`.
    filetype = 'string',

    -- The buffer's full path.
    path = 'string',

    -- The buffer's filename.
    filename = 'string',

    -- A unique prefix used to distinguish buffers with the same filename
    -- stored in different directories. For example, if we have two files
    -- `bar/foo.md` and `baz/foo.md`, then the first will have `bar/` as its
    -- unique prefix and the second one will have `baz/`.
    unique_prefix = 'string',

    -- The letter that is displayed when picking a buffer to either focus or
    -- close it.
    pick_letter = 'char',

    -- This needs the `kyazdani42/nvim-web/devicons` plugin to be installed.
    devicon = {
      -- An icon representing the buffer's filetype.
      icon = 'string',

      -- The colors of the devicon in hexadecimal format (useful to be passed
      -- to a component's `hl.fg` field (see |cokeline-components|).
      color = '#rrggbb',
    },

    -- The values in this table are the ones reported by Neovim's built in
    -- LSP interface.
    diagnostics = {
      errors = int,
      warnings = int,
      infos = int,
      hints = int,
    },
  }
<

==============================================================================
COMPONENTS                                                 *cokeline-components*

You can configure what each buffer in your bufferline will be composed of by
passing a list of components to the `setup` function.

For example, let's imagine we want to construct a very minimal bufferline
where the only things we're displaying for each buffer are its index, its
filename and a close button.

Then in our `setup` function we'd have:
>
  require('cokeline').setup({
    -- ...

    components = {
      {
        text = function(buffer) return ' ' .. buffer.index end,
      },
      {
        text = function(buffer) return ' ' .. buffer.filename .. ' ' end,
      },
      {
        text = 'ï™•',
        delete_buffer_on_left_click = true,
      },
      {
        text = ' ',
      }
    }
  }
<
in this case every buffer would be composed of four components: the first
displaying a space followed by the buffer index, the second one with the
filename padded by a space on each side, then a close button that allows us to
`:bdelete` the buffer when we left click on it, and finally an extra space.

This way of dividing every buffer into distinct components combined with the
ability to define every component's text and color depending on some property
of the buffer we're rendering allows for great customizability.

Every component passed to the `components` list has to be a table of the form:
>
  {
    text = 'string' | function(buffer) -> string,

    -- The foreground, backgrond and style of the component. `style` is a
    -- comma-separated string of values defined in `:h attr-list`.
    fg = '#rrggbb' | function(buffer) -> '#rrggbb' | nil,
    bg = '#rrggbb' | function(buffer) -> '#rrggbb' | nil,
    style = 'string' | nil,

    -- If `true` the buffer will be deleted when this component is
    -- left-clicked (useful to implement close buttons).
    delete_buffer_on_left_click = boolean,

    truncation = {
      -- default: index of the component in the `components` table (1 for the
      -- first component, 2 for the second, etc.).
      priority = int,

      -- default: `right`.
      direction = 'left' | 'middle' | 'right',
    },
  }
<
a component's `text` is the only key that has to be set to a value, all the
others are optional and can be omitted.

The `truncation` table controls what happens when a buffer is too long to be
displayed in its entirety.

More specifically, if a buffer's width (given by the sum of the widths of all
its components) is bigger than the `rendering.max_buffer_width` config option,
the buffer will be truncated.

The default behaviour is truncate the buffer by dropping components from right
to left, with the text of the last component that's included also being
shortened from right to left. This can be modified by changing the values of
the `truncation.priority` and `truncation.direction` keys.

The `truncation.priority` controls the order in which components are dropped:
the first component to be dropped will be the one with the lowest priority. If
that's still not enough to bring the width of the buffer within the
`rendering.max_buffer_width` limit, the component with the second lowest
priority will be dropped, and so on. Note that a higher priority means a
smaller integer value: a component with a priority of `5` will be dropped
*after* a component with a priority of `6`, even though `6 > 5`.

The `truncation.direction` key simply controls from which direction a component
is shortened. For example, you might want to set the `truncation.direction` of
a component displaying a filename to `'middle'` or `'left'`, so that if
has to be shortened you'll still be able to see its extension.


==============================================================================
MAPPINGS                                                     *cokeline-mappings*

The following `<Plug>` mappings can be used as the right-hand side to user
defined mappings:

  *<Plug>(cokeline-focus-<i>)*
    Focuses the buffer with index `i`.

  *<Plug>(cokeline-switch-<i>)*
    Switches the position of the currently focused buffer with the buffer with
    index `i`.

  *<Plug>(cokeline-focus-prev)*
  *<Plug>(cokeline-focus-next)*
    Focuses the previous/next buffer in the bufferline.

  *<Plug>(cokeline-switch-prev)*
  *<Plug>(cokeline-switch-next)*
    Switches the position of the currently focused buffer with the
    previous/next buffer in the bufferline.

  *<Plug>(cokeline-pick-focus)*
    Focus a buffer by its `pick_letter`.

  *<Plug>(cokeline-pick-close)*
    Close a buffer by its `pick_letter`.
